# =============================
# 1. Imports e controle de warnings
# =============================
import warnings
warnings.filterwarnings('ignore')

import os
from crewai import Agent, Task, Crew, Process
from crewai_tools import ScrapeWebsiteTool, SerperDevTool
from langchain_openai import ChatOpenAI
from IPython.display import Markdown
from src.utils.config import Config

# =============================
# 2. Configura√ß√£o de ambiente e chaves de API
# =============================
def setup_api_keys():
    """Configura as chaves de API necess√°rias"""
    try:
        # Configurar OpenAI
        os.environ["OPENAI_API_KEY"] = Config.OPENAI_API_KEY or ''
        os.environ["OPENAI_MODEL_NAME"] = Config.OPENAI_MODEL_NAME or 'gpt-4-turbo'
        # Configurar Serper API para busca na web
        if Config.SERPER_API_KEY:
            os.environ["SERPER_API_KEY"] = Config.SERPER_API_KEY
            print("üîç Serper API Key configurada para busca na web!")
        else:
            print("‚ö†Ô∏è Serper API Key n√£o configurada - ferramentas de busca na web podem falhar")
        print("üîë Chaves de API configuradas com sucesso!")
        return True
    except ImportError:
        print("‚ö†Ô∏è M√≥dulo utils n√£o encontrado. Verifique se o arquivo utils.py existe.")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao configurar chaves de API: {e}")
        return False

setup_api_keys()

# =============================
# 3. Defini√ß√£o das ferramentas (tools)
# =============================
search_tool = SerperDevTool()
scrape_tool = ScrapeWebsiteTool()

# =============================
# 4. Defini√ß√£o dos agentes
# =============================
data_analyst_agent = Agent(
    role="Analista de Dados",
    goal="Monitorar e analisar dados de mercado em tempo real para identificar tend√™ncias e prever movimentos do mercado.",
    backstory="Especializado em mercados financeiros, este agente utiliza modelagem estat√≠stica e aprendizado de m√°quina para fornecer insights cruciais. Com habilidade para dados, o Analista de Dados √© fundamental para informar decis√µes de negocia√ß√£o.",
    verbose=True,
    allow_delegation=True,
    tools=[scrape_tool, search_tool]
)

trading_strategy_agent = Agent(
    role="Desenvolvedor de Estrat√©gias de Negocia√ß√£o",
    goal="Desenvolver e testar diversas estrat√©gias de negocia√ß√£o com base nos insights do Analista de Dados.",
    backstory="Com profundo entendimento dos mercados financeiros e an√°lise quantitativa, este agente cria e refina estrat√©gias de negocia√ß√£o. Avalia o desempenho de diferentes abordagens para determinar as op√ß√µes mais lucrativas e avessas ao risco.",
    verbose=True,
    allow_delegation=True,
    tools=[scrape_tool, search_tool]
)

execution_agent = Agent(
    role="Consultor de Execu√ß√£o de Ordens",
    goal="Sugerir estrat√©gias √≥timas de execu√ß√£o de ordens com base nas estrat√©gias aprovadas.",
    backstory="Especialista em analisar o timing, pre√ßo e detalhes log√≠sticos das opera√ß√µes. Avalia esses fatores para fornecer sugest√µes fundamentadas sobre quando e como executar ordens para maximizar a efici√™ncia e ader√™ncia √† estrat√©gia.",
    verbose=True,
    allow_delegation=True,
    tools=[scrape_tool, search_tool]
)

risk_management_agent = Agent(
    role="Consultor de Riscos",
    goal="Avaliar e fornecer insights sobre os riscos associados √†s atividades de negocia√ß√£o propostas.",
    backstory="Com profundo conhecimento em modelos de avalia√ß√£o de risco e din√¢mica de mercado, este agente analisa os riscos das opera√ß√µes propostas. Oferece an√°lise detalhada da exposi√ß√£o ao risco e sugere salvaguardas para garantir que as opera√ß√µes estejam alinhadas √† toler√¢ncia ao risco da empresa.",
    verbose=True,
    allow_delegation=True,
    tools=[scrape_tool, search_tool]
)

# =============================
# 5. Defini√ß√£o das tasks
# =============================
data_analysis_task = Task(
    description=(
        "Monitorar e analisar continuamente os dados de mercado para a a√ß√£o selecionada ({stock_selection}). Utilizar modelagem estat√≠stica e aprendizado de m√°quina para identificar tend√™ncias e prever movimentos do mercado. Responda sempre em portugu√™s do Brasil."
    ),
    expected_output=(
        "Insights e alertas sobre oportunidades ou amea√ßas significativas de mercado para {stock_selection}."
    ),
    agent=data_analyst_agent,
)

strategy_development_task = Task(
    description=(
        "Desenvolver e refinar estrat√©gias de negocia√ß√£o com base nos insights do Analista de Dados e na toler√¢ncia ao risco definida pelo usu√°rio ({risk_tolerance}). Considerar as prefer√™ncias de negocia√ß√£o ({trading_strategy_preference}). Responda sempre em portugu√™s do Brasil."
    ),
    expected_output=(
        "Um conjunto de estrat√©gias de negocia√ß√£o potenciais para {stock_selection} que estejam alinhadas √† toler√¢ncia ao risco do usu√°rio."
    ),
    agent=trading_strategy_agent,
)

execution_planning_task = Task(
    description=(
        "Analisar as estrat√©gias de negocia√ß√£o aprovadas para determinar os melhores m√©todos de execu√ß√£o para {stock_selection}, considerando as condi√ß√µes atuais do mercado e precifica√ß√£o √≥tima. Responda sempre em portugu√™s do Brasil."
    ),
    expected_output=(
        "Planos detalhados sugerindo como e quando executar ordens para {stock_selection}."
    ),
    agent=execution_agent,
)

risk_assessment_task = Task(
    description=(
        "Avaliar os riscos associados √†s estrat√©gias de negocia√ß√£o e planos de execu√ß√£o propostos para {stock_selection}. Fornecer an√°lise detalhada dos riscos potenciais e sugerir estrat√©gias de mitiga√ß√£o. Responda sempre em portugu√™s do Brasil."
    ),
    expected_output=(
        "Um relat√≥rio abrangente de an√°lise de riscos detalhando riscos potenciais e recomenda√ß√µes de mitiga√ß√£o para {stock_selection}."
    ),
    agent=risk_management_agent,
)

# =============================
# 6. Defini√ß√£o da crew
# =============================
financial_trading_crew = Crew(
    agents=[
        data_analyst_agent,
        trading_strategy_agent,
        execution_agent,
        risk_management_agent
    ],
    tasks=[
        data_analysis_task,
        strategy_development_task,
        execution_planning_task,
        risk_assessment_task
    ],
    manager_llm=ChatOpenAI(model="gpt-4-turbo", temperature=0.7),
    process=Process.hierarchical,
    verbose=True
)

# =============================
# 7. Execu√ß√£o do processo e exibi√ß√£o do resultado
# =============================
financial_trading_inputs = {
    'stock_selection': 'BBAS3',
    'initial_capital': '100000',
    'risk_tolerance': 'M√©dia',
    'trading_strategy_preference': 'Day Trade',
    'news_impact_consideration': True
}

def format_markdown_result(result):
    """Formata o resultado do crew como Markdown bonito."""
    import json
    if isinstance(result, dict):
        md = "# Resultado da An√°lise Financeira\n"
        for k, v in result.items():
            md += f"\n## {k}\n"
            if isinstance(v, (dict, list)):
                md += f'```json\n{json.dumps(v, indent=2, ensure_ascii=False)}\n```\n'
            else:
                md += f'{v}\n'
        return md
    elif isinstance(result, list):
        md = "# Resultado da An√°lise Financeira\n\n"
        for item in result:
            md += f'- {item}\n'
        return md
    else:
        return str(result)

# Esta execu√ß√£o pode demorar
result = financial_trading_crew.kickoff(inputs=financial_trading_inputs)

Markdown(format_markdown_result(result))