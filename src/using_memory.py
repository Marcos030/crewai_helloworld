# AI_GENERATED_CODE_START
# [AI Generated] Data: 19/06/2024
# Descri√ß√£o: Exemplo de uso de mem√≥ria no CrewAI - Vers√£o Organizada
# Gerado por: Cursor AI
# Vers√£o: Python 3.10+, CrewAI 0.28.0+

import warnings
warnings.filterwarnings('ignore')

from crewai import Crew
from crewai.memory import ShortTermMemory, LongTermMemory, EntityMemory
from src.utils.config import Config
from src.agents import SupportAgent, QualityAssuranceAgent
from src.tasks import InquiryResolutionTask, QualityAssuranceTask
from IPython.display import display, Markdown

def main():
    """Fun√ß√£o principal do exemplo de uso de mem√≥ria no CrewAI"""
    
    print("üöÄ Iniciando exemplo de uso de mem√≥ria no CrewAI...")
    
    # Validar configura√ß√µes
    try:
        Config.validate_config()
        print("‚úÖ Configura√ß√µes validadas com sucesso!")
    except ValueError as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return
    
    # Configurar modelo OpenAI
    import os
    os.environ["OPENAI_API_KEY"] = Config.OPENAI_API_KEY
    os.environ["OPENAI_MODEL_NAME"] = Config.OPENAI_MODEL_NAME
    
    # Criar agentes usando as classes organizadas
    support_agent = SupportAgent.create()
    quality_assurance_agent = QualityAssuranceAgent.create()
    
    # Criar tarefas usando as classes organizadas
    inquiry_resolution_task = InquiryResolutionTask.create(support_agent)
    quality_assurance_task = QualityAssuranceTask.create(quality_assurance_agent, inquiry_resolution_task)
    
    # Configurar mem√≥ria espec√≠fica para evitar problemas do ChromaDB
    try:
        # Tentar criar mem√≥ria com configura√ß√£o espec√≠fica
        short_term_memory = ShortTermMemory(
            memory_type="simple",  # Usar mem√≥ria simples em vez de RAG
            max_tokens=1000
        )
        
        long_term_memory = LongTermMemory(
            memory_type="simple",
            max_tokens=2000
        )
        
        entity_memory = EntityMemory(
            memory_type="simple",
            max_tokens=1000
        )
        
        # Criar crew com mem√≥ria configurada
        crew = Crew(
            agents=[support_agent, quality_assurance_agent],
            tasks=[inquiry_resolution_task, quality_assurance_task],
            verbose=Config.CREWAI_VERBOSE,
            memory=True,
            short_term_memory=short_term_memory,
            long_term_memory=long_term_memory,
            entity_memory=entity_memory
        )
        print("‚úÖ Mem√≥ria configurada com sucesso!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao configurar mem√≥ria: {e}")
        print("üîÑ Tentando sem mem√≥ria espec√≠fica...")
        
        # Fallback: usar mem√≥ria padr√£o
        crew = Crew(
            agents=[support_agent, quality_assurance_agent],
            tasks=[inquiry_resolution_task, quality_assurance_task],
            verbose=Config.CREWAI_VERBOSE,
            memory=False  # Desabilitar mem√≥ria se houver erro
        )
    
    # Dados de entrada para o exemplo
    inputs = {
        "customer": "DeepLearningAI",
        "person": "Andrew Ng",
        "inquiry": "I need help with setting up a Crew "
                   "and kicking it off, specifically "
                   "how can I add memory to my crew? "
                   "Can you provide guidance?"
    }
    
    # Executar crew com inputs
    print("ü§ñ Executando crew de agentes...")
    result = crew.kickoff(inputs=inputs)
    
    # Exibir resultado em Markdown
    print("\n" + "="*50)
    print("üìã RESULTADO FINAL")
    print("="*50)
    
    # Exibir como Markdown
    display(Markdown(str(result)))
    
    print("="*50)
    print("\n‚úÖ Exemplo de uso de mem√≥ria no CrewAI conclu√≠do com sucesso!")

if __name__ == "__main__":
    main()
# AI_GENERATED_CODE_END